openapi: 3.0.1
info:
  title: Online lessons
  description: Online lessons REST API
  contact:
        name:  Khrystyna
        email: khrystyna.kmit.knm.2019@lpnu.ua
  version: 1.0.0
servers:
  - url: 'https://course.swagger.io/api/v2'
  - url: 'http://course.swagger.io/api/v2'

tags:
- name: lecturer
  description: Operations with lecturer
- name: student
  description: Operations with students
- name: course
  description: Operations with courses
- name: application
  description: Operations with applications

paths:
 
  /lecturer:
    post:
      tags:
        - lecturer 
      description: Operations with lecturer 
      summary: Operations with lecturer 
      operationId: createuser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/create_user'
      responses:
        '300':
          description: User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      security:
      - course_auth:
        - write:lecturer 
        - read:lecturer 
      - api_key: [ ]
  '/lecturer /{id_user}':
    get:
      tags:
        - lecturer 
      summary: Get user data
      operationId: getdata
      parameters:
        - name: id_user
          in: path
          required: true
          schema:
            type: string
      responses:
        '301':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        '400':
          description: User is not authorized
          content: {}
        '401':
          description: Only lecturer can do that
          content: {}
        '402':
          description: User not found
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      security:
      - course_auth:
        - read:lecturer 
      - api_key: [ ]
    put:
      tags:
        - lecturer 
      summary: Update user data
      operationId: Updatedata 
      parameters:
        - name: id_user
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/create_user'
      responses:
        '301':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        '400':
          description: User is not authorized
          content: {}
        '401':
          description: Only lecturer can do that
          content: {}
        '402':
          description: User not found
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      security:
      - course_auth:
        - write:lecturer 
        - read:lecturer 
      - api_key: [ ]
    delete:
      tags:
        - lecturer 
      summary: Delete user
      operationId: deleteuser 
      parameters:
        - name: id_user
          in: path
          required: true
          schema:
            type: string
      responses:
        '400':
          description: User is not authorized
          content: {}
        '401':
          description: Only lecturer can do that
          content: {}
        '402':
          description: User not found
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      security:
        - course_auth:
          - write:lecturer
          - read:lecturer
        - api_key: [ ]
  /student:
    post:
      tags:
        - student 
      description: Operations with students
      summary: Operations with students
      operationId: createstudent
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/create_user'
      responses:
        '300':
          description: User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      security:
      - course_auth:
        - write:student
        - read:student
      - api_key: [ ]
  '/student/{id_user}':
    get:
      tags:
        - student
      summary: Get user data
      operationId: getuserdata
      parameters:
        - name: id_user
          in: path
          required: true
          schema:
            type: string
      responses:
        '301':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        '400':
          description: User is not authorized
          content: {}
        '401':
          description: Only lecturer can do that
          content: {}
        '402':
          description: User not found
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      security:
      - course_auth:
        - read:student
      - api_key: [ ]
    put:
      tags:
        - student
      summary: Update user data
      operationId: Updatestudentdata 
      parameters:
        - name: id_user
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/create_user'
      responses:
        '301':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        '400':
          description: User is not authorized
          content: {}
        '401':
          description: Only lecturer can do that
          content: {}
        '402':
          description: User not found
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      security:
      - course_auth:
        - write:student
        - read:student
      - api_key: [ ]
    delete:
      tags:
        - student
      summary: Delete user
      operationId: deletestudentuser 
      parameters:
        - name: id_user
          in: path
          required: true
          schema:
            type: string
      responses:
        '400':
          description: User is not authorized
          content: {}
        '401':
          description: Only lecturer can do that
          content: {}
        '402':
          description: User not found
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      security:
        - course_auth:
          - write:lecturer
          - read:lecturer
        - api_key: [ ]
  /course:
    post:
      tags:
        - course
      summary: Add a new course
      operationId: addcourse
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/create_course'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/course'
        '400':
          description: User is not authorized
          content: {}
        '401':
          description: Only lecturer can do that
          content: {}
        '402':
          description: User not found
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      security:
      - course_auth:
        - write:lecturer
        - read:lecturer
      - api_key: [ ]
    get:
      tags:
        - course
      summary: Get all the courses
      operationId: getcourses
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/course'
                nullable: false
        '403':
          description: course not found
          content: {}
        '402':
          description: User not found
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      security:
      - course_auth:
        - write:student
        - read:student
      - api_key: [ ]
  '/course/{id_course}':
    put:
      tags:
        - course
      summary: Update the course with such id
      operationId: Updatecourse
      parameters:
        - name: id_course
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/create_course'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/course'
        '400':
          description: User is not authorized
          content: {}
        '401':
          description: Only lecturer can do that
          content: {}
        '402':
          description: User not found
          content: {}
        '403':
          description: Course not found
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      security:
      - course_auth:
        - write:lecturer
        - read:lecturer
      - api_key: [ ]
    delete:
      tags:
        - course
      summary: Delete the course with such id
      operationId: deletecourse 
      parameters:
        - name: id_course
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ''
          content: {}
        '400':
          description: User is not authorized
          content: {}
        '401':
          description: Only administrator can do that
          content: {}
        '402':
          description: User not found
          content: {}
        '403':
          description: Course not found
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      security:
        - course_auth:
          - write:lecturer
          - read:lecturer
        - api_key: [ ]
    post:
      tags:
        - course
      summary: Add a new student
      operationId: addstudent
      parameters:
        - name: id_course
          in: path
          required: true
          schema:
            type: string
      description: How many students to be on course at one time (max 5)                
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/create_course'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/course'
        '400':
          description: User is not authorized
          content: {}
        '401':
          description: Only lecturer can do that
          content: {}
        '402':
          description: User not found
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      security:
      - course_auth:
        - write:lecturer
        - read:lecturer
      - api_key: [ ]
  '/student{id_course}':
    post:
      tags:
        - application
      summary: Request to enroll course
      operationId: requestenroll
      parameters:
        - name: id_course
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/request_enroll'
        required: true
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/student'
        '400':
          description: User is not authorized
          content: {}
        '404':
          description: Only student can do that
          content: {}
        '405':
          description: You are not allowed to enroll
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      security:
      - course_auth:
        - write:student
        - read:student
      - api_key: [ ]
  '/lecturer{id_course}':
    post:
      tags:
        - application
      summary: Accept enrolling course
      operationId: acceptenroll
      parameters:
        - name: id_course
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/accept_enroll'
        required: true
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/lecturer'
        '400':
          description: User is not authorized
          content: {}
        '404':
          description: Only lecturer can do that
          content: {}
        '405':
          description: You are not allowed to accept
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      security:
      - course_auth:
        - write:lecturer
        - read:lecturer
      - api_key: [ ]
    delete:
      tags:
        - application
      summary: Deny enrolling course
      operationId: denyenroll
      parameters:
        - name: id_course
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ''
          content: {}
        '400':
          description: User is not authorized
          content: {}
        '401':
          description: Only Lecturer can do that
          content: {}
        '402':
          description: User not found
          content: {}
        '403':
          description: Course not found
          content: {}
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      security:
        - course_auth:
          - write:lecturer
          - read:lecturer
        - api_key: [ ]

components:
  schemas:
    personal_information:
      required:
        - email
        - password
      type: object
      properties:
        email:
          type: string
        password:
          type: string

    user_level:
      required:
        - user_level
      type: object
      properties:
        user level:
          type: string
    user:
      type: object
      properties:
        id:
          type: string
        first name:
          type: string
        last name:
          type: string
        birthday:
          type: string
          format: date
        email:
          type: string
        role:
          type: string
      nullable: false
    lecturer:
      type: object
      properties:
        id:
          type: string
        first name:
          type: string
        last name:
          type: string
        birthday:
          type: string
          format: date
        email:
          type: string
        role:
          type: string
      nullable: false  
    course:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
          format: float
      nullable: false
    student:
      type: object
      properties:
        user id:
          type: string
        course id:
          type: string
          format: float
      nullable: false
    create_user:
      type: object
      properties:
        first name:
          type: string
        last name:
          type: string
        birthday:
          type: string
          format: date
        email:
          type: string
        role:
          type: string
      nullable: false
    create_course:
      type: object
      properties:
        name:
          type: string
      nullable: false
    request_enroll:
      type: object
      properties:
        course id:
          type: string
      nullable: false
    accept_enroll:
      type: object
      properties:
        course id:
          type: string
      nullable: false
    error:
      required:
        - code
      type: object
      properties:
        code:
          type: integer
        message:
          type: string

            
  securitySchemes:
    course_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: http://course.swagger.io/oauth/dialog
          scopes:
            write:student: modify user in your account
            read:student: read your course
            write:lecturer: modify user in your account
            read:lecturer: read your course
    api_key:
      type: apiKey
      name: api_key
      in: header

